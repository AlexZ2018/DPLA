'''
set_collection_list.py
with input: files/provider_list.csv
with output: files/collection_list.csv
with output: files/item_belongs_to_no_collection_list.csv
'''
import sys
import dpla_utils
import getopt, dpla_config
import csv
import argparse

PROVIDER_HEADER_PROVIDER_NAME = 'provider.name' 
PROVIDER_HEADER_ITEMS_COUNT = 'count_of_items'
PROVIDER_HEADER_DATAPROVIDER_PATH = 'dataProvider_file_path'
COLLECTION_HEADER_COLLECTION_TITLE = 'collection.title'
COLLECTION_HEADER_COLLECTION_ID = 'collection.id'
COLLECTION_HEADER_COUNT_OF_ITEMS = 'count_of_items'
COLLECTION_HEADER_DATAPROVIDER_NAME = 'dataProvider.name'
COLLECTION_HEADER_PROVIDER_NAME = 'provider.name'
DATAPROVIDER = 'dataProvider'
QUERY_FIELD = 'sourceResource.collection,@id'
DATAPROVIDER_FILE_SUFFLIX = '_dataProvider.csv'
invalid_dataProvider_list = ['C']
EXPECTED_INPUT_HEADER = [PROVIDER_HEADER_PROVIDER_NAME, PROVIDER_HEADER_ITEMS_COUNT, PROVIDER_HEADER_DATAPROVIDER_PATH]


def set_collection_list():
        api_key = dpla_config.API_KEY

        #read input output files
        parser = argparse.ArgumentParser()
        parser.add_argument('-i', action='append', dest = 'provider_input_file', help = "An input provider file generated by set_provider_list.py is needed")
        parser.add_argument('-o', action = 'append', dest = 'collection_output_file', help = "An output collection file is needed, folder must exist")
        parser.add_argument('-n', action = 'append', dest = 'item_with_no_collection_file', help = "A file stores items contributed by no collection is needed, folder must exist")
        results = parser.parse_args()

        provider_input_file = results.provider_input_file[0]
        collection_output_file = results.collection_output_file[0]
        item_belongs_to_no_collection_file = results.item_with_no_collection_file[0]

        try:
                # process_provider_list, add dataProvider_list_path
                #process_provider_list(input_file)
                entire_collection_list = []
                item_belongs_to_no_collection_list = [];
                collection_count = 0

                #open input file, traverse it, and get each dataProvider list path
                with open(provider_input_file) as input_file:
                        provider_csv_reader = csv.reader(input_file)

                        #check input header
                        input_header = next(provider_csv_reader, None)

                        if not input_header == EXPECTED_INPUT_HEADER:
                                print("input header doesn`t match")
                                sys.exit()

                        collections_result_list = []
                        for provider_information_row in provider_csv_reader:

                                print("*************  Calm down and keep patient... Process: ",  int(collection_count/ 365), " %     *******************")
                                #print(provider_information_row[0])
                                dataProvider_file_path = provider_information_row[2]

                                #open dataProvider file
                                with open(dataProvider_file_path) as dataProvider_input_file:
                                        dataProvider_csv_reader = csv.reader(dataProvider_input_file)

                                        
                                        #print(dataProvider_file_path)
                                        
                                        next(dataProvider_csv_reader, None)

                                        for dataProvider_information_row in dataProvider_csv_reader:
                                                #print(dataProvider_information_row)
                                                item_collection_id_dict = {'@id': 'collection_id'} # keep track of collection.id of each item
                                                item_collection_title_dict = {'@id', 'title'}
                                                item_belongs_to_no_collection_count = 0
                                                item_belongs_to_multi_collections_list = []
                                                collection_list = [] #record collection.title, collection.id, count
                                                dataProvider_name = dataProvider_information_row[0] 
                                                #dataProvider_name = 'Grand Valley State University. University Libraries'
                                                
                                                if dataProvider_name in invalid_dataProvider_list:
                                                        continue
                                                dataProvider_name = process_dataProvider_name(dataProvider_name)
                                                #query collections by faceting dataProvider.name
                                                query_term = {DATAPROVIDER: dataProvider_name}#dataProvider_name
                                                #query_term['facets'] = 'sourceResource.subject.@id'
                                                query_term['fields'] = QUERY_FIELD
                                                query_term['count'] = 500# need to be larger
                                                collection_query_response = dpla_utils.dpla_fetch_remote(api_key, **query_term)
                                                for index in range(len(collection_query_response)):
                                                        #if current item belongs to no collection
                                                        if not 'sourceResource.collection' in collection_query_response[index]:
                                                                item_belongs_to_no_collection_count = item_belongs_to_no_collection_count + 1
                                                        else:
                                                                current_item = collection_query_response[index]['@id']
                                                                current_collection = collection_query_response[index]['sourceResource.collection']
                                                                
                                                                #check if this item belongs to multiple collection
                                                                if (current_item in item_collection_id_dict) or (current_item in item_collection_title_dict):
                                                                        item_belongs_to_multi_collections_list.append(current_item)
                                                                else:
                                                                        # current item only belongs to new collection
                                                                        # record this item - collection mapping
                                                                        if 'title' in current_collection:
                                                                                item_collection_title_dict.update({current_item: current_collection['title']})
                                                                                #item_collection_title_dict[current_item] = current_collection['title']
                                                                        if 'id' in current_collection:
                                                                                item_collection_id_dict.update({current_item: current_collection['id']})
                                                                                #item_collection_id_dict[current_item] = current_collection['id']

                                                                        # check if need a new collection ro record this collection - item mapping
                                                                        collection_already_exist = False
                                                                        #print(collection_list)
                                                                        for collection_index in range(len(collection_list)):
                                                                                current_collection_entry = collection_list[collection_index]
                                                                                if (('title' in current_collection) and (current_collection['title'] == current_collection_entry['collection.title'])) or (('id' in current_collection) and (current_collection['id'] == current_collection_entry['collection.id'])):
                                                                                        # run this when current collection already exists
                                                                                        collection_list[collection_index]['count_of_items'] = collection_list[collection_index]['count_of_items'] + 1
                                                                                        collection_already_exist = True;
                                                                                        break; # so this works when current collection doesn`t show up in previous collection_list

                                                                        # we really need a new collection entry!!
                                                                        if collection_already_exist == False:
                                                                                #initialize new collection entry
                                                                                new_collection_entry = {COLLECTION_HEADER_COLLECTION_ID: None, COLLECTION_HEADER_COLLECTION_TITLE: None, COLLECTION_HEADER_COUNT_OF_ITEMS: 1, COLLECTION_HEADER_PROVIDER_NAME: provider_information_row[0], COLLECTION_HEADER_DATAPROVIDER_NAME: dataProvider_name}

                                                                                if 'title' in current_collection:
                                                                                        new_collection_entry['collection.title'] = current_collection['title']
                                                                                if 'id' in current_collection:
                                                                                        new_collection_entry['collection.id'] = current_collection['id']
                                                                                
                                                                                #if not (new_collection_entry['collection.title'] is None) and (new_collection_entry['collection.id'] is None):
                                                                                collection_list.append(new_collection_entry)

                                                                                #print(new_collection_entry)
                                                
                                                item_belongs_to_no_collection_entry = {COLLECTION_HEADER_PROVIDER_NAME: provider_information_row[0], COLLECTION_HEADER_DATAPROVIDER_NAME: dataProvider_name, COLLECTION_HEADER_COUNT_OF_ITEMS: item_belongs_to_no_collection_count}
                                                #print(dataProvider_name, " <put in a list> contributes items with no collection :::::", item_belongs_to_no_collection_count)
                                                item_belongs_to_no_collection_list.append(item_belongs_to_no_collection_entry)
                                                collection_count = collection_count + len(collection_list)
                                                entire_collection_list.append(collection_list)
                                                #print(collection_list)

                                                # collection_query_response['sourceResource.collection.id']['terms'] is a list
                                dataProvider_input_file.close()         
                        try:
                                #write collection information into files
                                with open(collection_output_file, 'w') as collection_file:
                                        collection_file_writer = csv.writer(collection_file)
                                        header = [COLLECTION_HEADER_PROVIDER_NAME, COLLECTION_HEADER_DATAPROVIDER_NAME, COLLECTION_HEADER_COLLECTION_ID, COLLECTION_HEADER_COLLECTION_TITLE, COLLECTION_HEADER_COUNT_OF_ITEMS]
                                        collection_file_writer.writerow(header)
                                        collection_csv_writer = csv.DictWriter(collection_file, header)
                                        #collection_file_writer.writerows(collections_result_list)
                                        for index in range(len(entire_collection_list)):
                                                if len(entire_collection_list[index]) == 0:
                                                        continue
                                                collection_csv_writer.writerows(entire_collection_list[index])
                                                #print(entire_collection_list[index])

                                collection_file.close()

                        except IOError as output_file_error:
                                print("could not write to this output file")

                        try:
                                #write items_belongs_to_no_collection_list
                                with open(item_belongs_to_no_collection_file, 'w') as item_no_collection_file:
                                        item_no_collection_writer = csv.writer(item_no_collection_file)
                                        header = [COLLECTION_HEADER_PROVIDER_NAME, COLLECTION_HEADER_DATAPROVIDER_NAME, COLLECTION_HEADER_COUNT_OF_ITEMS]
                                        item_no_collection_writer.writerow(header)
                                        item_no_collection_csv_writer = csv.DictWriter(item_no_collection_file, header)
                                        item_no_collection_csv_writer.writerows(item_belongs_to_no_collection_list)
                                item_no_collection_file.close()

                        except IOError as item_belongs_to_no_collection_file_error:
                                print("could not write to item_belongs_to_no_collection_file")                                                
                                #dataProvider_input_file.close()
                input_file.close()                              
                        
        except IOError as input_file_error:
                print("couldn`t read the input file ") 

     
def process_dataProvider_name(dataProvider_name):
        if "[" in dataProvider_name:
                dataProvider_name = dataProvider_name.replace("[", "\[")

        if "]" in dataProvider_name:
                dataProvider_name = dataProvider_name.replace("]", "\]")

        if "/" in dataProvider_name:
                dataProvider_name = dataProvider_name.replace("/", "\/")

        return dataProvider_name
      
def main():
        set_collection_list()

main()
